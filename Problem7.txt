1.1 Errors in a computer program can be classified according to when they are
detected and, if they are detected at compile time, what part of the compiler
detects them. Using your favorite imperative language, give an example of
each of the following.
(a) A lexical error, detected by the scanner
(b) A syntax error, detected by the parser
(c) A static semantic error, detected by semantic analysis
(d) A dynamic semantic error, detected by code generated by the compiler
(e) An error that the compiler can neither catch nor easily generate code to
catch (this should be a violation of the language definition, not just a
program bug)

1.1.a: In C++, "int 6a;" would be a lexical error as "6a" is an invalid token

1.1.b: In C++, "int;" would be a syntax error as it is a statement that cannot have any meaning in the context of the program

1.1.c: In C++, "apple = 5;" would be a static semantic error if "apple" was not previously defined

1.1.d: In C++, "int x=0; int apple = 5/x;" would be a dynamic semantic error

1.1.e: In C++, "int[10] apples; apples[10]=5;" would be an uncheckable error, and violate the language definition.